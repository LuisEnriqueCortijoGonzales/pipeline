$date
	Sat Nov 16 23:57:12 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 32 ! WriteData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 # DataAdr [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module processor $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 & WriteData [31:0] $end
$var wire 32 ' ReadData [31:0] $end
$var wire 32 ( PC [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 ) Instruction [31:0] $end
$var wire 32 * DataAdr [31:0] $end
$scope module arm_core $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 + WriteData [31:0] $end
$var wire 1 , RegWrite $end
$var wire 2 - RegSrc [1:0] $end
$var wire 32 . ReadData [31:0] $end
$var wire 1 / PCSrc $end
$var wire 32 0 PC [31:0] $end
$var wire 1 1 MemtoReg $end
$var wire 1 " MemWrite $end
$var wire 32 2 Instr [31:0] $end
$var wire 2 3 ImmSrc [1:0] $end
$var wire 1 4 ALUSrc $end
$var wire 32 5 ALUResult [31:0] $end
$var wire 4 6 ALUFlags [3:0] $end
$var wire 3 7 ALUControl [2:0] $end
$scope module control_unit $end
$var wire 20 8 Instr [31:12] $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 9 RegisterWrite $end
$var wire 1 , RegWrite $end
$var wire 2 : RegSrc [1:0] $end
$var wire 1 / PCSrc $end
$var wire 1 1 MemtoReg $end
$var wire 1 ; MemoryWrite $end
$var wire 1 " MemWrite $end
$var wire 2 < ImmSrc [1:0] $end
$var wire 2 = FlagWrite [1:0] $end
$var wire 1 > BranchSignal $end
$var wire 1 4 ALUSrc $end
$var wire 4 ? ALUFlags [3:0] $end
$var wire 3 @ ALUControl [2:0] $end
$scope module condition_logic $end
$var wire 4 A Cond [3:0] $end
$var wire 2 B FlagWriteEnable [1:0] $end
$var wire 1 " MemWrite $end
$var wire 1 / PCSrc $end
$var wire 1 , RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 9 RegW $end
$var wire 1 > PCS $end
$var wire 1 ; MemW $end
$var wire 2 C FlagW [1:0] $end
$var wire 4 D CurrentFlags [3:0] $end
$var wire 1 E ConditionMet $end
$var wire 4 F ALUFlags [3:0] $end
$scope module condition_checker $end
$var wire 4 G Cond [3:0] $end
$var wire 4 H Flags [3:0] $end
$var wire 1 I ge $end
$var wire 1 J zero $end
$var wire 1 K overflow $end
$var wire 1 L neg $end
$var wire 1 M carry $end
$var reg 1 E CondEx $end
$upscope $end
$scope module flag_register_high $end
$var wire 1 $ clk $end
$var wire 2 N d [1:0] $end
$var wire 1 O en $end
$var wire 1 % reset $end
$var parameter 32 P WIDTH $end
$var reg 2 Q q [1:0] $end
$upscope $end
$scope module flag_register_low $end
$var wire 1 $ clk $end
$var wire 2 R d [1:0] $end
$var wire 1 S en $end
$var wire 1 % reset $end
$var parameter 32 T WIDTH $end
$var reg 2 U q [1:0] $end
$upscope $end
$upscope $end
$scope module decoder $end
$var wire 6 V Funct [5:0] $end
$var wire 2 W Op [1:0] $end
$var wire 1 > PCS $end
$var wire 4 X Rd [3:0] $end
$var wire 1 9 RegW $end
$var wire 2 Y RegSrc [1:0] $end
$var wire 1 1 MemtoReg $end
$var wire 1 ; MemW $end
$var wire 2 Z ImmSrc [1:0] $end
$var wire 1 [ BranchSignal $end
$var wire 1 4 ALUSrc $end
$var wire 1 \ ALUOperation $end
$var reg 3 ] ALUControl [2:0] $end
$var reg 2 ^ FlagW [1:0] $end
$var reg 10 _ controls [9:0] $end
$upscope $end
$upscope $end
$scope module data_path $end
$var wire 3 ` ALUControl [2:0] $end
$var wire 1 4 ALUSrc $end
$var wire 2 a ImmSrc [1:0] $end
$var wire 1 1 MemtoReg $end
$var wire 1 / PCSrc $end
$var wire 2 b RegSrc [1:0] $end
$var wire 1 , RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 c WriteDataMuxed [31:0] $end
$var wire 32 d WriteData [31:0] $end
$var wire 32 e SrcB [31:0] $end
$var wire 32 f SrcA [31:0] $end
$var wire 32 g ReadData [31:0] $end
$var wire 4 h RA2 [3:0] $end
$var wire 4 i RA1 [3:0] $end
$var wire 32 j PCPlus8 [31:0] $end
$var wire 32 k PCPlus4 [31:0] $end
$var wire 32 l PCNext [31:0] $end
$var wire 32 m PC [31:0] $end
$var wire 32 n Instr [31:0] $end
$var wire 32 o ExtendedImm [31:0] $end
$var wire 32 p ALUResult [31:0] $end
$var wire 4 q ALUFlags [3:0] $end
$scope module arithmetic_logic_unit $end
$var wire 3 r ALUControl [2:0] $end
$var wire 32 s a_signed [31:0] $end
$var wire 32 t b_signed [31:0] $end
$var wire 1 u carry_flag $end
$var wire 1 v overflow_flag $end
$var wire 1 w zero_flag $end
$var wire 1 x udiv $end
$var wire 33 y sum [32:0] $end
$var wire 32 z sdiv [31:0] $end
$var wire 1 { neg_flag $end
$var wire 32 | inverted_b [31:0] $end
$var wire 32 } b [31:0] $end
$var wire 32 ~ a [31:0] $end
$var wire 4 !" ALUFlags [3:0] $end
$var reg 32 "" Result [31:0] $end
$upscope $end
$scope module immediate_extend $end
$var wire 2 #" ImmSrc [1:0] $end
$var wire 24 $" Instr [23:0] $end
$var reg 32 %" ExtImm [31:0] $end
$upscope $end
$scope module pc_add1 $end
$var wire 32 &" b [31:0] $end
$var wire 32 '" y [31:0] $end
$var wire 32 (" a [31:0] $end
$var parameter 32 )" WIDTH $end
$upscope $end
$scope module pc_add2 $end
$var wire 32 *" a [31:0] $end
$var wire 32 +" b [31:0] $end
$var wire 32 ," y [31:0] $end
$var parameter 32 -" WIDTH $end
$upscope $end
$scope module pc_mux $end
$var wire 32 ." d0 [31:0] $end
$var wire 32 /" d1 [31:0] $end
$var wire 1 / s $end
$var wire 32 0" y [31:0] $end
$var parameter 32 1" WIDTH $end
$upscope $end
$scope module pc_register $end
$var wire 1 $ clk $end
$var wire 32 2" d [31:0] $end
$var wire 1 % reset $end
$var parameter 32 3" WIDTH $end
$var reg 32 4" q [31:0] $end
$upscope $end
$scope module ra1_mux $end
$var wire 4 5" d0 [3:0] $end
$var wire 4 6" d1 [3:0] $end
$var wire 1 7" s $end
$var wire 4 8" y [3:0] $end
$var parameter 32 9" WIDTH $end
$upscope $end
$scope module ra2_mux $end
$var wire 4 :" d0 [3:0] $end
$var wire 4 ;" d1 [3:0] $end
$var wire 1 <" s $end
$var wire 4 =" y [3:0] $end
$var parameter 32 >" WIDTH $end
$upscope $end
$scope module registers $end
$var wire 1 $ clk $end
$var wire 32 ?" r15 [31:0] $end
$var wire 4 @" ra1 [3:0] $end
$var wire 4 A" ra2 [3:0] $end
$var wire 4 B" wa3 [3:0] $end
$var wire 1 , we3 $end
$var wire 32 C" wd3 [31:0] $end
$var wire 32 D" rd2 [31:0] $end
$var wire 32 E" rd1 [31:0] $end
$upscope $end
$scope module srcb_mux $end
$var wire 32 F" d0 [31:0] $end
$var wire 32 G" d1 [31:0] $end
$var wire 1 4 s $end
$var wire 32 H" y [31:0] $end
$var parameter 32 I" WIDTH $end
$upscope $end
$scope module write_data_mux $end
$var wire 32 J" d0 [31:0] $end
$var wire 1 1 s $end
$var wire 32 K" y [31:0] $end
$var wire 32 L" d1 [31:0] $end
$var parameter 32 M" WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$scope module data_memory $end
$var wire 32 N" address [31:0] $end
$var wire 1 $ clk $end
$var wire 32 O" read_data [31:0] $end
$var wire 1 " we $end
$var wire 32 P" write_data [31:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 32 Q" address [31:0] $end
$var wire 32 R" instruction [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 M"
b100000 I"
b100 >"
b100 9"
b100000 3"
b100000 1"
b100000 -"
b100000 )"
b10 T
b10 P
$end
#0
$dumpvars
b11100000010011110000000000001111 R"
b0 Q"
b1000 P"
bx O"
b0 N"
bx L"
b0 K"
b0 J"
b1000 H"
b1111 G"
b1000 F"
b1000 E"
b1000 D"
b0 C"
b0 B"
b1111 A"
b1111 @"
b1000 ?"
b1111 ="
0<"
b0 ;"
b1111 :"
b1111 8"
07"
b1111 6"
b1111 5"
b0 4"
b100 2"
b100 0"
b0 /"
b100 ."
b1000 ,"
b100 +"
b100 *"
b0 ("
b100 '"
b100 &"
b1111 %"
b10011110000000000001111 $"
b0 #"
b0 ""
b110 !"
b1000 ~
b1000 }
b11111111111111111111111111110111 |
0{
b1 z
b100000000000000000000000000000000 y
1x
1w
0v
1u
b1000 t
b1000 s
b1 r
b110 q
b0 p
b1111 o
b11100000010011110000000000001111 n
b0 m
b100 l
b100 k
b1000 j
b1111 i
b1111 h
bx g
b1000 f
b1000 e
b1000 d
b0 c
b0 b
b0 a
b1 `
b1001 _
b0 ^
b1 ]
1\
0[
b0 Z
b0 Y
b0 X
b0 W
b100 V
b0 U
0S
b10 R
b0 Q
0O
b1 N
0M
0L
0K
0J
1I
b0 H
b1110 G
b110 F
1E
b0 D
b0 C
b0 B
b1110 A
b1 @
b110 ?
0>
b0 =
b0 <
0;
b0 :
19
b11100000010011110000 8
b1 7
b110 6
b0 5
04
b0 3
b11100000010011110000000000001111 2
01
b0 0
0/
bx .
b0 -
1,
b1000 +
b0 *
b11100000010011110000000000001111 )
b0 (
bx '
b1000 &
1%
0$
b0 #
0"
b1000 !
$end
#5000
1$
#10000
0$
#15000
1$
#20000
0$
0%
#25000
b0 R
0x
0u
0{
b0 z
14
b0 7
b0 @
b0 ]
b0 `
b0 r
b101001 _
b100 |
b100 o
b100 %"
b100 G"
b100 h
b100 ="
b100 A"
b0 i
b0 8"
b0 @"
b101000 V
b1 X
b0 N
b100 c
b100 C"
b100 K"
b100000000001000000000100 $"
b1 B"
b1 ;"
b100 :"
b0 5"
b11100010100000000001 8
b0 6
b0 ?
b0 F
b0 q
b0 !"
0w
b100 #
b100 *
b100 5
b100 p
b100 ""
b100 /"
b100 J"
b100 N"
b100 t
b100 e
b100 }
b100 H"
b11100010100000000001000000000100 )
b11100010100000000001000000000100 2
b11100010100000000001000000000100 n
b11100010100000000001000000000100 R"
b100 y
b0 s
b0 f
b0 ~
b0 E"
bx !
bx &
bx +
bx d
bx D"
bx F"
bx P"
b1000 l
b1000 0"
b1000 2"
b1100 j
b1100 ,"
b1100 ?"
b1000 k
b1000 '"
b1000 *"
b1000 ."
b100 (
b100 0
b100 m
b100 ("
b100 4"
b100 Q"
1$
#30000
0$
#35000
b10 c
b10 C"
b10 K"
b10 #
b10 *
b10 5
b10 p
b10 ""
b10 /"
b10 J"
b10 N"
b10 y
b10 |
b10 t
b10 e
b10 }
b10 H"
b10 o
b10 %"
b10 G"
b10 h
b10 ="
b10 A"
b10 X
b100000000010000000000010 $"
b10 B"
b10 ;"
b10 :"
b11100010100000000010 8
b11100010100000000010000000000010 )
b11100010100000000010000000000010 2
b11100010100000000010000000000010 n
b11100010100000000010000000000010 R"
b1100 l
b1100 0"
b1100 2"
b10000 j
b10000 ,"
b10000 ?"
b1100 k
b1100 '"
b1100 *"
b1100 ."
b1000 (
b1000 0
b1000 m
b1000 ("
b1000 4"
b1000 Q"
1$
#40000
0$
#45000
b0 N
b10 c
b10 C"
b10 K"
b11111111111111111111111111111101 |
b10 z
b0 6
b0 ?
b0 F
b0 q
b0 !"
0w
b10 #
b10 *
b10 5
b10 p
b10 ""
b10 /"
b10 J"
b10 N"
04
b100000000000000000000000000000010 y
b100 s
b100 f
b100 ~
b100 E"
b101 7
b101 @
b101 ]
b101 `
b101 r
b1001 _
b1 i
b1 8"
b1 @"
b10110 V
b11 X
b11000010011000000000010 $"
b11 B"
b11 ;"
b1 5"
b11100001011000010011 8
b11100001011000010011000000000010 )
b11100001011000010011000000000010 2
b11100001011000010011000000000010 n
b11100001011000010011000000000010 R"
b10000 l
b10000 0"
b10000 2"
b10 !
b10 &
b10 +
b10 d
b10 D"
b10 F"
b10 P"
b10100 j
b10100 ,"
b10100 ?"
b10000 k
b10000 '"
b10000 *"
b10000 ."
b1100 (
b1100 0
b1100 m
b1100 ("
b1100 4"
b1100 Q"
1$
#50000
0$
#55000
b1 N
b0 c
b0 C"
b0 K"
b0 |
b0 t
b0 e
b0 }
b0 H"
b0 z
b100 6
b100 ?
b100 F
b100 q
b100 !"
1w
b0 #
b0 *
b0 5
b0 p
b0 ""
b0 /"
b0 J"
b0 N"
0,
b0 !
b0 &
b0 +
b0 d
b0 D"
b0 F"
b0 P"
b0 y
b0 s
b0 f
b0 ~
b0 E"
b100 7
b100 @
b100 ]
b100 `
b100 r
0E
b0 o
b0 %"
b0 G"
b0 h
b0 ="
b0 A"
b0 i
b0 8"
b0 @"
b0 V
b0 X
b0 A
b0 G
b0 $"
b0 B"
b0 ;"
b0 :"
b0 5"
b0 8
b0 )
b0 2
b0 n
b0 R"
b10100 l
b10100 0"
b10100 2"
b11000 j
b11000 ,"
b11000 ?"
b10100 k
b10100 '"
b10100 *"
b10100 ."
b10000 (
b10000 0
b10000 m
b10000 ("
b10000 4"
b10000 Q"
1$
#60000
0$
#65000
b11000 l
b11000 0"
b11000 2"
b11100 j
b11100 ,"
b11100 ?"
b11000 k
b11000 '"
b11000 *"
b11000 ."
b10100 (
b10100 0
b10100 m
b10100 ("
b10100 4"
b10100 Q"
1$
#70000
0$
#75000
b11100 l
b11100 0"
b11100 2"
b100000 j
b100000 ,"
b100000 ?"
b11100 k
b11100 '"
b11100 *"
b11100 ."
b11000 (
b11000 0
b11000 m
b11000 ("
b11000 4"
b11000 Q"
1$
#80000
0$
#85000
b100000 l
b100000 0"
b100000 2"
b100100 j
b100100 ,"
b100100 ?"
b100000 k
b100000 '"
b100000 *"
b100000 ."
b11100 (
b11100 0
b11100 m
b11100 ("
b11100 4"
b11100 Q"
1$
#90000
0$
#95000
b100100 l
b100100 0"
b100100 2"
b101000 j
b101000 ,"
b101000 ?"
b100100 k
b100100 '"
b100100 *"
b100100 ."
b100000 (
b100000 0
b100000 m
b100000 ("
b100000 4"
b100000 Q"
1$
#100000
0$
#105000
b101000 l
b101000 0"
b101000 2"
b101100 j
b101100 ,"
b101100 ?"
b101000 k
b101000 '"
b101000 *"
b101000 ."
b100100 (
b100100 0
b100100 m
b100100 ("
b100100 4"
b100100 Q"
1$
#110000
0$
#115000
b101100 l
b101100 0"
b101100 2"
b110000 j
b110000 ,"
b110000 ?"
b101100 k
b101100 '"
b101100 *"
b101100 ."
b101000 (
b101000 0
b101000 m
b101000 ("
b101000 4"
b101000 Q"
1$
#120000
0$
#125000
b110000 l
b110000 0"
b110000 2"
b110100 j
b110100 ,"
b110100 ?"
b110000 k
b110000 '"
b110000 *"
b110000 ."
b101100 (
b101100 0
b101100 m
b101100 ("
b101100 4"
b101100 Q"
1$
#130000
0$
#135000
b110100 l
b110100 0"
b110100 2"
b111000 j
b111000 ,"
b111000 ?"
b110100 k
b110100 '"
b110100 *"
b110100 ."
b110000 (
b110000 0
b110000 m
b110000 ("
b110000 4"
b110000 Q"
1$
#140000
0$
#145000
b111000 l
b111000 0"
b111000 2"
b111100 j
b111100 ,"
b111100 ?"
b111000 k
b111000 '"
b111000 *"
b111000 ."
b110100 (
b110100 0
b110100 m
b110100 ("
b110100 4"
b110100 Q"
1$
#150000
0$
#155000
b111100 l
b111100 0"
b111100 2"
b1000000 j
b1000000 ,"
b1000000 ?"
b111100 k
b111100 '"
b111100 *"
b111100 ."
b111000 (
b111000 0
b111000 m
b111000 ("
b111000 4"
b111000 Q"
1$
#160000
0$
#165000
b1000000 l
b1000000 0"
b1000000 2"
b1000100 j
b1000100 ,"
b1000100 ?"
b1000000 k
b1000000 '"
b1000000 *"
b1000000 ."
b111100 (
b111100 0
b111100 m
b111100 ("
b111100 4"
b111100 Q"
1$
#170000
0$
#175000
b1000100 l
b1000100 0"
b1000100 2"
b1001000 j
b1001000 ,"
b1001000 ?"
b1000100 k
b1000100 '"
b1000100 *"
b1000100 ."
b1000000 (
b1000000 0
b1000000 m
b1000000 ("
b1000000 4"
b1000000 Q"
1$
#180000
0$
#185000
b1001000 l
b1001000 0"
b1001000 2"
b1001100 j
b1001100 ,"
b1001100 ?"
b1001000 k
b1001000 '"
b1001000 *"
b1001000 ."
b1000100 (
b1000100 0
b1000100 m
b1000100 ("
b1000100 4"
b1000100 Q"
1$
#190000
0$
#195000
b1001100 l
b1001100 0"
b1001100 2"
b1010000 j
b1010000 ,"
b1010000 ?"
b1001100 k
b1001100 '"
b1001100 *"
b1001100 ."
b1001000 (
b1001000 0
b1001000 m
b1001000 ("
b1001000 4"
b1001000 Q"
1$
#200000
0$
#205000
b1010000 l
b1010000 0"
b1010000 2"
b1010100 j
b1010100 ,"
b1010100 ?"
b1010000 k
b1010000 '"
b1010000 *"
b1010000 ."
b1001100 (
b1001100 0
b1001100 m
b1001100 ("
b1001100 4"
b1001100 Q"
1$
#210000
0$
#215000
b1010100 l
b1010100 0"
b1010100 2"
b1011000 j
b1011000 ,"
b1011000 ?"
b1010100 k
b1010100 '"
b1010100 *"
b1010100 ."
b1010000 (
b1010000 0
b1010000 m
b1010000 ("
b1010000 4"
b1010000 Q"
1$
#220000
0$
